@Controller
public class CacheController {
    @Autowired
    private CacheService cacheService;

    @GetMapping("/cache-counts")
    public String getCacheCounts(Model model) {
        // Retrieve general cache counts and deviations
        Map<String, Boolean> deviationMap = cacheService.updateCacheCounts();
        Map<String, Integer> cacheCounts = getCacheCountsFromIgnite();

        // Prepare list of CacheInfo objects
        List<CacheInfo> caches = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : cacheCounts.entrySet()) {
            String cacheName = entry.getKey();
            int count = entry.getValue();
            boolean deviation = deviationMap.getOrDefault(cacheName, false);
            caches.add(new CacheInfo(cacheName, count, deviation));
        }

        model.addAttribute("caches", caches);
        return "cacheCounts";
    }

    @GetMapping("/schema/{schemaName}")
    public String getSchemaEntities(@PathVariable String schemaName, Model model) {
        // Example logic to fetch entity names for a specific schema
        List<String> entityNames = fetchEntityNamesForSchema(schemaName);

        model.addAttribute("schemaName", schemaName);
        model.addAttribute("entityNames", entityNames);
        return "schemaEntities";
    }

    private Map<String, Integer> getCacheCountsFromIgnite() {
        // Method to fetch cache counts from Ignite
        // Implementation remains the same
    }

    private List<String> fetchEntityNamesForSchema(String schemaName) {
        // Example implementation to fetch entity names for a schema
        // Replace with your logic to retrieve entity names for the given schema
        List<String> entityNames = new ArrayList<>();
        switch (schemaName) {
            case "sds":
                entityNames.add("clientaccount");
                entityNames.add("clientcategory");
                // Add other entity names specific to 'sds' schema
                break;
            case "esm":
                entityNames.add("product");
                entityNames.add("location");
                // Add other entity names specific to 'esm' schema
                break;
            // Add cases for other schemas ('public', 'tracrds', 'sys', etc.)
            default:
                // Handle default case or unknown schema
                break;
        }
        return entityNames;
    }

    public static class CacheInfo {
        // CacheInfo class remains the same
    }
}

















<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Schema Entities</title>
</head>
<body>
<h1 th:text="'Entities in ' + ${schemaName}"></h1>
<ul>
    <li th:each="entity : ${entityNames}" th:text="${entity}"></li>
</ul>
<a href="/cache-counts">Back to Cache Counts</a>
</body>
</html>
