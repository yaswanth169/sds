import org.apache.ignite.cache.query.SqlFieldsQuery;
import org.apache.ignite.cache.query.QueryCursor;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class CacheService {

    @Autowired
    private IgniteClient igniteClient;

    @Autowired
    private CachingConfig cachingConfig;

    public void configureIgniteClientCache() {
        ClientCacheConfiguration ccfg = new ClientCacheConfiguration();
        ccfg.setSqlSchema(cachingConfig.getSchemaName());
        ccfg.setName(cachingConfig.getCacheName());

        igniteClient.getOrCreateCache(ccfg).withKeepBinary();
        log.info("Client cache started");
    }

   public Map<String, Long> getTableRowCounts() {
    Map<String, Long> tableCounts = new HashMap<>();
    String schema = cachingConfig.getSchemaName();
    String cacheName = cachingConfig.getCacheName();

    String sqlTables = String.format("SELECT table_name FROM information_schema.tables WHERE table_schema = '%s' AND table_type = 'TABLE'", schema);

    try (QueryCursor<List<?>> cursorTables = igniteClient.cache(cacheName).query(new SqlFieldsQuery(sqlTables))) {
        for (List<?> row : cursorTables) {
            String tableName = (String) row.get(0);
            String sqlCount = String.format("SELECT COUNT(*) FROM %s.%s", schema, tableName);

            try (QueryCursor<List<?>> cursorCount = igniteClient.cache(cacheName).query(new SqlFieldsQuery(sqlCount))) {
                for (List<?> countRow : cursorCount) {
                    long rowCount = ((Number) countRow.get(0)).longValue();
                    tableCounts.put(tableName, rowCount);
                    System.out.println("Table Name: " + tableName + ", Row Count: " + rowCount);
                }
            }
        }
    } catch (Exception e) {
        System.err.println("Error fetching table row counts: " + e.getMessage());
        e.printStackTrace();
        // Handle exception as per your application's error handling strategy
    }

    return tableCounts;
}

//table names finding 
public List<String> getAllTableNames() {
    List<String> tableNames = new ArrayList<>();
    String schema = cachingConfig.getSchemaName();

    String sqlTables = String.format("SELECT table_name FROM information_schema.tables WHERE table_schema = '%s' AND table_type = 'TABLE'", schema);

    try (QueryCursor<List<?>> cursorTables = igniteClient.query(new SqlFieldsQuery(sqlTables))) {
        for (List<?> row : cursorTables) {
            String tableName = (String) row.get(0);
            tableNames.add(tableName);
        }
    }

    return tableNames;
}
//trying to get all data from cache
public List<String> getCacheData(String cacheName) {
    List<String> cacheData = new ArrayList<>();
    String sqlQuery = "SELECT * FROM " + cacheName;
    
    try (QueryCursor<List<?>> cursor = igniteClient.query(new SqlFieldsQuery(sqlQuery))) {
        for (List<?> row : cursor) {
            String rowData = row.toString(); // Customize based on your data structure
            cacheData.add(rowData);
        }
    } catch (Exception e) {
        log.error("Failed to fetch data from cache: " + e.getMessage());
    }
    
    return cacheData;
}



 public static void printAllCacheData(IgniteCache<String, String> cache) {
        // Query to get all key-value pairs from the cache
        SqlFieldsQuery query = new SqlFieldsQuery("SELECT _key, _val FROM String WHERE cache_name = 'address'");

        try (QueryCursor<List<?>> cursor = cache.query(query)) {
            for (List<?> row : cursor) {
                String key = (String) row.get(0);
                String value = (String) row.get(1);
                System.out.println("Key: " + key + ", Value: " + value);
            }
        }
    }

}





import org.apache.ignite.Ignite;
import org.apache.ignite.cache.CachePeekMode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class IgniteService {
    @Autowired
    private Ignite ignite;

    public Map<String, Integer> getTableCounts() {
        Map<String, Integer> tableCounts = new HashMap<>();
        ignite.cacheNames().forEach(cacheName -> {
            int count = ignite.cache(cacheName).size(CachePeekMode.PRIMARY);
            tableCounts.put(cacheName, count);
        });
        return tableCounts;
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

@RestController
@RequestMapping("/api")
public class IgniteController {
    @Autowired
    private IgniteService igniteService;

    @GetMapping("/table-counts")
    public Map<String, Integer> getTableCounts() {
        return igniteService.getTableCounts();
    }
}


