import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class FileHandlerTest {

    private static final String FILE_PATH = "cache_counts.json";
    private ObjectMapper objectMapper;
    private FileHandler fileHandler;

    @BeforeEach
    public void setUp() {
        objectMapper = mock(ObjectMapper.class);
        fileHandler = new FileHandler();
    }

    @Test
    public void testReadCounts_FileExists_ReturnsCounts(@TempDir Path tempDir) throws IOException {
        // Arrange
        File file = tempDir.resolve(FILE_PATH).toFile();
        String jsonContent = "{\"Lei\": [8, 8, 8, 8, 8]}";
        Files.write(file.toPath(), jsonContent.getBytes());
        Map<String, List<Integer>> expectedCounts = new HashMap<>();
        expectedCounts.put("Lei", Arrays.asList(8, 8, 8, 8, 8));
        when(objectMapper.readValue(file, new TypeReference<Map<String, List<Integer>>>() {})).thenReturn(expectedCounts);

        // Act
        Map<String, List<Integer>> counts = FileHandler.readCounts();

        // Assert
        assertNotNull(counts);
        assertEquals(expectedCounts, counts);
        verify(objectMapper, times(1)).readValue(file, new TypeReference<Map<String, List<Integer>>>() {});
    }

    @Test
    public void testReadCounts_FileDoesNotExist_ReturnsEmptyMap(@TempDir Path tempDir) {
        // Arrange
        File file = tempDir.resolve(FILE_PATH).toFile();

        // Act
        Map<String, List<Integer>> counts = FileHandler.readCounts();

        // Assert
        assertNotNull(counts);
        assertTrue(counts.isEmpty());
        verifyNoInteractions(objectMapper);
    }

    @Test
    public void testWriteCounts_WritesCountsToFile(@TempDir Path tempDir) throws IOException {
        // Arrange
        Map<String, List<Integer>> counts = new HashMap<>();
        counts.put("Lei", Arrays.asList(8, 8, 8, 8, 8));
        File file = tempDir.resolve(FILE_PATH).toFile();

        // Act
        FileHandler.writeCounts(counts);

        // Assert
        verify(objectMapper, times(1)).writeValue(file, counts);
    }

    @Test
    public void testWriteCounts_IOExceptionIsHandled() throws IOException {
        // Arrange
        Map<String, List<Integer>> counts = new HashMap<>();
        doThrow(IOException.class).when(objectMapper).writeValue(any(File.class), eq(counts));

        // Act and Assert
        assertDoesNotThrow(() -> FileHandler.writeCounts(counts));
        verify(objectMapper, times(1)).writeValue(any(File.class), eq(counts));
    }
}
